// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Contexts;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(CalendarIntegrationSystemDbContext))]
    [Migration("20240719003905_tph")]
    partial class tph
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.CalendarItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ItemType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("CalendarItems", (string)null);

                    b.HasDiscriminator<string>("ItemType").HasValue("CalendarItem");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Domain.Entities.OperationClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("OperationClaims");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dba1f313-b04a-46ef-9b3a-8b3ae17889de"),
                            CreatedDate = new DateTime(2024, 7, 19, 0, 39, 4, 671, DateTimeKind.Utc).AddTicks(6077),
                            Email = "john@example.com",
                            PasswordHash = new byte[] { 227, 155, 155, 120, 43, 203, 23, 223, 110, 214, 11, 202, 206, 31, 186, 6, 88, 226, 219, 171, 20, 134, 146, 145, 142, 39, 249, 16, 246, 67, 1, 114, 159, 42, 23, 237, 77, 82, 37, 138, 18, 53, 156, 39, 84, 146, 88, 80, 63, 131, 147, 89, 140, 42, 168, 126, 21, 56, 251, 228, 154, 204, 5, 178 },
                            PasswordSalt = new byte[] { 183, 178, 59, 35, 25, 215, 207, 165, 142, 71, 187, 26, 195, 183, 212, 19, 4, 221, 248, 13, 82, 25, 59, 8, 118, 62, 104, 4, 115, 16, 215, 237, 69, 62, 2, 233, 209, 246, 117, 141, 1, 91, 69, 65, 166, 163, 173, 157, 86, 81, 63, 40, 192, 208, 98, 127, 179, 159, 232, 67, 133, 143, 93, 151, 89, 102, 12, 47, 255, 24, 38, 245, 164, 60, 11, 205, 190, 176, 145, 230, 248, 74, 147, 224, 192, 215, 87, 221, 23, 163, 147, 134, 226, 145, 210, 192, 152, 218, 129, 73, 245, 215, 169, 187, 188, 88, 209, 142, 128, 15, 126, 97, 199, 45, 113, 74, 97, 5, 151, 131, 255, 37, 85, 19, 99, 185, 241, 248 },
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "john_doe"
                        },
                        new
                        {
                            Id = new Guid("97bfa56d-ce88-4755-a4b6-1560862d8fb1"),
                            CreatedDate = new DateTime(2024, 7, 19, 0, 39, 4, 671, DateTimeKind.Utc).AddTicks(6080),
                            Email = "jane@example.com",
                            PasswordHash = new byte[] { 39, 242, 192, 65, 154, 126, 204, 38, 95, 30, 208, 86, 131, 129, 17, 100, 110, 44, 245, 109, 24, 38, 38, 96, 93, 249, 217, 48, 132, 205, 249, 147, 94, 153, 192, 161, 243, 82, 23, 134, 82, 77, 22, 3, 65, 60, 3, 176, 222, 107, 0, 206, 253, 165, 38, 255, 236, 224, 164, 44, 46, 39, 62, 36 },
                            PasswordSalt = new byte[] { 220, 142, 206, 141, 182, 204, 75, 49, 64, 183, 110, 137, 202, 240, 140, 196, 223, 40, 155, 146, 82, 243, 227, 54, 219, 110, 49, 19, 200, 63, 152, 216, 13, 100, 253, 28, 74, 247, 207, 243, 254, 11, 130, 125, 148, 12, 26, 66, 253, 228, 82, 93, 131, 235, 224, 4, 10, 202, 17, 129, 155, 38, 118, 1, 61, 252, 90, 58, 179, 102, 127, 87, 192, 242, 35, 200, 179, 161, 51, 21, 40, 5, 185, 229, 58, 213, 125, 160, 201, 84, 207, 237, 56, 200, 230, 55, 56, 114, 184, 249, 135, 55, 150, 103, 103, 1, 183, 215, 96, 125, 154, 180, 174, 119, 171, 233, 75, 218, 35, 227, 156, 88, 32, 187, 65, 106, 167, 185 },
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "jane_doe"
                        });
                });

            modelBuilder.Entity("Domain.Entities.UserOperationClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OperationClaimId")
                        .HasColumnType("int");

                    b.Property<Guid>("OperationClaimId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OperationClaimId1");

                    b.HasIndex("UserId");

                    b.ToTable("UserOperationClaims");
                });

            modelBuilder.Entity("Domain.Entities.Event", b =>
                {
                    b.HasBaseType("Domain.Entities.CalendarItem");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasIndex("UserId");

                    b.HasDiscriminator().HasValue("Event");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4d20ca45-136b-4fc3-a29f-cd76ee29d74a"),
                            CreatedDate = new DateTime(2024, 7, 19, 0, 39, 4, 671, DateTimeKind.Utc).AddTicks(6231),
                            EndDate = new DateTime(2024, 7, 19, 2, 39, 4, 671, DateTimeKind.Utc).AddTicks(6226),
                            StartDate = new DateTime(2024, 7, 19, 0, 39, 4, 671, DateTimeKind.Utc).AddTicks(6225),
                            Title = "Event 1",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("dba1f313-b04a-46ef-9b3a-8b3ae17889de"),
                            Location = "Besiktas Kultur Merkezi",
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("3bc2b265-56fe-4003-ba03-f7721055c21c"),
                            CreatedDate = new DateTime(2024, 7, 19, 0, 39, 4, 671, DateTimeKind.Utc).AddTicks(6234),
                            EndDate = new DateTime(2024, 7, 19, 3, 39, 4, 671, DateTimeKind.Utc).AddTicks(6233),
                            StartDate = new DateTime(2024, 7, 19, 0, 39, 4, 671, DateTimeKind.Utc).AddTicks(6233),
                            Title = "Event 2",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("97bfa56d-ce88-4755-a4b6-1560862d8fb1"),
                            Location = "Volkswagen Arena",
                            Status = 0
                        });
                });

            modelBuilder.Entity("Domain.Entities.Task", b =>
                {
                    b.HasBaseType("Domain.Entities.CalendarItem");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasIndex("UserId");

                    b.ToTable("CalendarItems", t =>
                        {
                            t.Property("Status")
                                .HasColumnName("Task_Status");
                        });

                    b.HasDiscriminator().HasValue("Task");

                    b.HasData(
                        new
                        {
                            Id = new Guid("45c1906a-2f9b-4387-9ca4-edecca7e842e"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndDate = new DateTime(2024, 7, 19, 8, 39, 4, 671, DateTimeKind.Utc).AddTicks(6260),
                            StartDate = new DateTime(2024, 7, 19, 0, 39, 4, 671, DateTimeKind.Utc).AddTicks(6259),
                            Title = "Task 1",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("dba1f313-b04a-46ef-9b3a-8b3ae17889de"),
                            Status = 0
                        });
                });

            modelBuilder.Entity("Domain.Entities.UserOperationClaim", b =>
                {
                    b.HasOne("Domain.Entities.OperationClaim", "OperationClaim")
                        .WithMany("UserOperationClaims")
                        .HasForeignKey("OperationClaimId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperationClaim");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Event", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Events")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Task", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Tasks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.OperationClaim", b =>
                {
                    b.Navigation("UserOperationClaims");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
