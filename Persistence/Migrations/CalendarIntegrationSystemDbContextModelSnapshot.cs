// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Contexts;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(CalendarIntegrationSystemDbContext))]
    partial class CalendarIntegrationSystemDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e14ab769-9bbd-415e-be0a-3e57f162ebff"),
                            CreatedDate = new DateTime(2024, 7, 11, 0, 29, 12, 786, DateTimeKind.Utc).AddTicks(2525),
                            EndDate = new DateTime(2024, 7, 11, 2, 29, 12, 786, DateTimeKind.Utc).AddTicks(2520),
                            StartDate = new DateTime(2024, 7, 11, 0, 29, 12, 786, DateTimeKind.Utc).AddTicks(2520),
                            Status = 0,
                            Title = "Event 1",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("370ebb87-c905-4c1b-85b9-119776587994")
                        },
                        new
                        {
                            Id = new Guid("5dad0354-16ef-4c78-8576-d995c514195c"),
                            CreatedDate = new DateTime(2024, 7, 11, 0, 29, 12, 786, DateTimeKind.Utc).AddTicks(2529),
                            EndDate = new DateTime(2024, 7, 11, 3, 29, 12, 786, DateTimeKind.Utc).AddTicks(2528),
                            StartDate = new DateTime(2024, 7, 11, 0, 29, 12, 786, DateTimeKind.Utc).AddTicks(2528),
                            Status = 0,
                            Title = "Event 2",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("ef2c7840-dbef-4a92-974f-63059500c535")
                        });
                });

            modelBuilder.Entity("Domain.Entities.OperationClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("OperationClaims");
                });

            modelBuilder.Entity("Domain.Entities.Task", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d81c8cf3-04c0-46c8-a098-77190b64eda8"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndDate = new DateTime(2024, 7, 11, 8, 29, 12, 786, DateTimeKind.Utc).AddTicks(2556),
                            StartDate = new DateTime(2024, 7, 11, 0, 29, 12, 786, DateTimeKind.Utc).AddTicks(2555),
                            Status = 0,
                            Title = "Task 1",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("370ebb87-c905-4c1b-85b9-119776587994")
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("370ebb87-c905-4c1b-85b9-119776587994"),
                            CreatedDate = new DateTime(2024, 7, 11, 0, 29, 12, 786, DateTimeKind.Utc).AddTicks(2388),
                            Email = "john@example.com",
                            PasswordHash = new byte[] { 156, 166, 25, 222, 248, 106, 190, 236, 237, 245, 248, 197, 240, 154, 160, 50, 74, 64, 170, 127, 179, 237, 172, 217, 226, 66, 6, 61, 110, 232, 183, 238, 230, 226, 72, 42, 160, 114, 181, 66, 107, 83, 96, 151, 209, 231, 61, 90, 166, 201, 121, 4, 61, 115, 31, 124, 30, 15, 2, 21, 131, 14, 53, 171 },
                            PasswordSalt = new byte[] { 75, 9, 32, 39, 239, 45, 229, 63, 3, 183, 58, 43, 175, 188, 50, 85, 254, 7, 215, 211, 11, 113, 177, 45, 141, 235, 249, 208, 228, 8, 166, 72, 141, 35, 181, 56, 65, 89, 189, 222, 227, 162, 109, 230, 97, 78, 248, 242, 134, 69, 165, 62, 190, 153, 225, 44, 223, 228, 116, 216, 223, 101, 160, 195, 55, 213, 137, 216, 178, 90, 158, 172, 101, 19, 105, 55, 20, 195, 154, 140, 65, 86, 121, 248, 195, 156, 98, 82, 5, 105, 16, 177, 18, 180, 245, 125, 55, 235, 243, 133, 172, 208, 4, 99, 88, 185, 17, 68, 142, 8, 152, 148, 9, 55, 249, 160, 215, 21, 36, 208, 88, 250, 230, 112, 61, 11, 138, 65 },
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "john_doe"
                        },
                        new
                        {
                            Id = new Guid("ef2c7840-dbef-4a92-974f-63059500c535"),
                            CreatedDate = new DateTime(2024, 7, 11, 0, 29, 12, 786, DateTimeKind.Utc).AddTicks(2390),
                            Email = "jane@example.com",
                            PasswordHash = new byte[] { 255, 162, 198, 138, 194, 153, 129, 57, 229, 153, 208, 9, 46, 79, 63, 61, 32, 238, 201, 69, 42, 26, 219, 240, 71, 215, 221, 42, 148, 248, 68, 83, 252, 165, 62, 99, 195, 167, 244, 51, 131, 78, 90, 82, 199, 3, 89, 97, 246, 210, 145, 216, 82, 239, 8, 123, 166, 115, 173, 210, 90, 39, 176, 63 },
                            PasswordSalt = new byte[] { 146, 53, 83, 205, 249, 237, 74, 154, 37, 5, 225, 150, 141, 33, 161, 101, 187, 152, 255, 214, 45, 241, 119, 43, 168, 151, 106, 12, 68, 52, 197, 24, 240, 230, 128, 252, 8, 4, 164, 100, 233, 73, 35, 122, 16, 112, 15, 240, 71, 137, 165, 209, 13, 167, 57, 3, 101, 54, 239, 149, 85, 244, 145, 225, 17, 241, 113, 223, 242, 68, 108, 156, 224, 62, 162, 58, 30, 28, 212, 98, 115, 8, 54, 6, 167, 44, 201, 213, 107, 148, 123, 38, 26, 212, 244, 187, 240, 94, 253, 224, 193, 180, 213, 13, 218, 142, 165, 156, 142, 26, 41, 233, 185, 7, 113, 207, 6, 36, 201, 28, 153, 122, 6, 112, 66, 89, 234, 66 },
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "jane_doe"
                        });
                });

            modelBuilder.Entity("Domain.Entities.UserOperationClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OperationClaimId")
                        .HasColumnType("int");

                    b.Property<Guid>("OperationClaimId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OperationClaimId1");

                    b.HasIndex("UserId");

                    b.ToTable("UserOperationClaims");
                });

            modelBuilder.Entity("Domain.Entities.Event", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Events")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Task", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Tasks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.UserOperationClaim", b =>
                {
                    b.HasOne("Domain.Entities.OperationClaim", "OperationClaim")
                        .WithMany("UserOperationClaims")
                        .HasForeignKey("OperationClaimId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperationClaim");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.OperationClaim", b =>
                {
                    b.Navigation("UserOperationClaims");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
